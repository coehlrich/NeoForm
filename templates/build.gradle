apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

import groovy.xml.*
import java.nio.file.Files

repositories {
    mavenCentral()
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
    maven {
        name 'forge'
        url 'https://maven.neoforged.net/releases'
    }
}

configurations.all {
    transitive = false
}

dependencies {
    {libraries}
}

ext {
    DISTRO = '{distro}'
    INJECT = {inject}
    ASSETS = {assets}
    MERGED = {merged_src}
    INTELLIJ = Boolean.getBoolean('idea.active')
}

if (file(INJECT).exists()) {
    if (new File(INJECT, 'package-info-template.java').exists()) {
        sourceSets.create('pkginfo')
    }
    sourceSets.create('inject') {
        java {
            if (INTELLIJ) {
                def inject = file(INJECT)
                def symlink = file(inject.name)
                if (!symlink.exists()) {
                    Files.createSymbolicLink(symlink.toPath(), inject.toPath())
                }
                srcDir symlink
            } else {
                srcDir INJECT
            }
            exclude 'package-info-template.java'
            if (DISTRO == 'server')
                exclude '**/client/**/*'
            else
                exclude '**/server/**/*'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

if (MERGED != null) {
    if (INTELLIJ) {
        def merged = file(MERGED)
        def symlink = file(merged.name)
        if (!symlink.exists()) {
            Files.createSymbolicLink(symlink.toPath(), merged.toPath())
        }
        sourceSets.main.java.srcDirs symlink
    } else {
        sourceSets.main.java.srcDirs MERGED
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of({java_target})
